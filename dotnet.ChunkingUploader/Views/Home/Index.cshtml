@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
    <form id="formData" onsubmit="return false">
        <input type="file" id="fileInput" name="filename">
        <input type="submit">
    </form>
</div>

@section Scripts {
    <script type="text/javascript">  
        var executionQueue = []

        $('#formData').submit(function(e){
            let file = $('#fileInput').prop('files')[0]
            let chunks = breakFileIntoChunks(file)
            uploadFileChunks(file.name, chunks)
            e.preventDefault()
        })

        function uploadFileChunks(fileName, fileChunks) {
            let concurrentRequestNumber = 5 // change this value to adjust number of request to send concurrency
            if (fileChunks.length < concurrentRequestNumber) {
                concurrentRequestNumber = fileChunks.length
            }
            executionQueue = getChunksExecutionQueue(fileChunks, fileName)
            console.log(executionQueue)
            for (let i = 0; i < concurrentRequestNumber; i++) {
                let execution = executionQueue.shift();
                execution();
            }
        }

        function getChunksExecutionQueue(fileChunks, fileName) {
            let fileChunkSize = fileChunks.length
            console.log("Creating chunks execution queue with size: ", fileChunkSize)
            // Adding logic to handle either concurrecy or sequentially, in this case will handle it concurrecy since ajax call is asynchronous by default
            return fileChunks.map((fc, i) => {
                let formData = new FormData()
                formData.append('file', fc, fileName)
                formData.append('fileName', fileName)
                formData.append('sequence', i)
                formData.append('total', fileChunkSize)

                return function() {
                    console.log('Function has been execute.')
                    $.ajax({
                        type: "POST",
                        url: "Home/Index",
                        contentType: false,
                        processData: false,
                        data: formData,
                        dataType: "json",
                        success: function (i) {
                            processNextQueueItem(i)
                        },
                        error: function (i) {
                            retryAddToQueue(i)
                        } 
                    })
                }
            })
        }

        function breakFileIntoChunks(file) {
            let chunkSizeInKB = 100 * 1024
            let fileChunks = [];
            // since it's split a file by bytes, it depends to change naming measurement of chunkSizeIn(KB/MB/GB), and the buffer bytes will be change accordingly (1024, 1024*1024, 1024*1024*1024)
            // in this example, we're converting KB -> bytes, thus it's number of kilobytes * 1024
            let bufferChunksSizeInBytes = chunkSizeInKB * (1024)

            let currentSplitBytePosition = 0;
            let endPosition = bufferChunksSizeInBytes;

            while (currentSplitBytePosition < file.size) {
                fileChunks.push(file.slice(currentSplitBytePosition, endPosition))
                currentSplitBytePosition = endPosition
                endPosition = currentSplitBytePosition + bufferChunksSizeInBytes
            }
            return fileChunks
        }

        function processNextQueueItem(seq, statusCode) {
            console.log("Chunk upload success. Seq number: " , seq)
            if (executionQueue.length != 0) {
                console.log("Processing next chunk.")
                let nextExecution = executionQueue.shift()
                nextExecution()
            }
        }

        function retryAddToQueue(seq) {
            console.log("Chunk upload failed. Sequence number: ", seq)
        }

    </script>  
}
